{"version":3,"file":"taskpane.js","mappings":"6KACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CAGAJ,EAAoBO,EAAID,ECzBxBN,EAAoBQ,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBb,EAAoBc,EAAI,SAASC,EAAKC,GAAQ,OAAOC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,EAAO,E,WCAtG,IAAIK,EACArB,EAAoBQ,EAAEc,gBAAeD,EAAYrB,EAAoBQ,EAAEe,SAAW,IACtF,IAAIC,EAAWxB,EAAoBQ,EAAEgB,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOX,IAAc,aAAaY,KAAKZ,KAAaA,EAAYQ,EAAQG,KAAKJ,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIa,MAAM,yDAChCb,EAAYA,EAAUc,QAAQ,SAAU,IAAIA,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KAC1GnC,EAAoBoC,EAAIf,C,IClBxBrB,EAAoBqC,EAAIb,SAASc,SAAWC,KAAKhB,SAASiB,KCG1DC,OAAOC,SAAQ,WACbC,QAAQC,IAAI,sBACd,IAEApB,SAASqB,eAAe,eAAeC,iBAAiB,SAAS,WAC/DtB,SAASqB,eAAe,gBAAgBE,UAAYrC,KAAKsC,KAC3D,I,wBCRiC,IAAIC,IAAI,cACR,IAAIA,IAAI,a","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/* global Office, Excel */\r\n\r\n// Initialize Office.js\r\nOffice.onReady(() => {\r\n  console.log(\"Excel Add-in ready.\")\r\n})\r\n\r\ndocument.getElementById(\"temperature\").addEventListener(\"input\", function () {\r\n  document.getElementById(\"temp-display\").innerText = this.value\r\n})\r\n\r\nasync function processRows() {\r\n  const headerRow = Number.parseInt(document.getElementById(\"headerRow\").value)\r\n  const formatPrompt = document.getElementById(\"formatPrompt\").value\r\n  const outputColumn = document.getElementById(\"outputColumn\").value.trim().toUpperCase()\r\n  const temperature = Number.parseFloat(document.getElementById(\"temperature\").value)\r\n\r\n  const mode = document.querySelector(\"input[name='rowMode']:checked\").value\r\n  let rowStart, rowEnd\r\n\r\n  if (mode === \"auto\") {\r\n    rowStart = headerRow + 1\r\n    rowEnd = rowStart + Number.parseInt(document.getElementById(\"autoRowCount\").value) - 1\r\n  } else {\r\n    rowStart = Number.parseInt(document.getElementById(\"fixedStartRow\").value)\r\n    rowEnd = Number.parseInt(document.getElementById(\"fixedEndRow\").value)\r\n  }\r\n\r\n  try {\r\n    showLoading(true)\r\n    await Excel.run(async (context) => {\r\n      const sheet = context.workbook.worksheets.getActiveWorksheet()\r\n\r\n      // Generate A to Z column letters\r\n      const colLetters = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i))\r\n\r\n      // Load all input data needed for prompt values\r\n      const inputRange = sheet.getRange(`A${rowStart}:Z${rowEnd}`)\r\n      inputRange.load(\"values\")\r\n      await context.sync()\r\n\r\n      const inputValues = inputRange.values\r\n      const results = []\r\n\r\n      for (let i = 0; i < inputValues.length; i++) {\r\n        const row = inputValues[i]\r\n        let currentPrompt = formatPrompt\r\n\r\n        // Replace all placeholders {{column}}\r\n        let missingData = false\r\n        currentPrompt = currentPrompt.replace(/{{(.*?)}}/g, (match, columnName) => {\r\n          console.log(`Looking for column: \"${columnName}\"`);\r\n          // Check if the column name exists in the colMap\r\n          if (!colLetters.includes(columnName)) {\r\n            missingData = true\r\n            return `[MISSING]`\r\n          } else {\r\n            const colIndex = colLetters.indexOf(columnName)\r\n            const cellValue = row[colIndex] || `[MISSING]` // Default to [MISSING] if empty\r\n            return cellValue\r\n          }\r\n        })\r\n\r\n        if (missingData) {\r\n          results.push([\"Error: Missing data in one or more columns\"])\r\n          continue\r\n        }\r\n\r\n        const response = await fetchData(currentPrompt, formatPrompt, temperature);\r\n        if (!response.ok) {\r\n          throw new Error(`API error: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        \r\n        results.push([data.summarized_text || `Error`])\r\n      }\r\n\r\n      // Write results to specified column\r\n      const outputRange = sheet.getRange(`${outputColumn}${rowStart}:${outputColumn}${rowEnd}`)\r\n      outputRange.values = results\r\n      await context.sync()\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error processing rows:\", error)\r\n  }\r\n  finally {\r\n    showLoading(false)\r\n  }\r\n}\r\n\r\nfunction fetchData(currentPrompt, formatPrompt, temperature) {\r\n  return fetch(\"http://localhost:5000/summarize\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      text: currentPrompt,\r\n      format: formatPrompt,\r\n      temperature,\r\n    }),\r\n  });\r\n}\r\n\r\nfunction showLoading(isLoading) {\r\n  let spinner = document.getElementById(\"loadingSpinner\")\r\n  if (!spinner) {\r\n    spinner = document.createElement(\"div\")\r\n    spinner.id = \"loadingSpinner\"\r\n    spinner.style.position = \"fixed\"\r\n    spinner.style.top = \"0\"\r\n    spinner.style.left = \"0\"\r\n    spinner.style.width = \"100vw\"\r\n    spinner.style.height = \"100vh\"\r\n    spinner.style.backgroundColor = \"rgba(255, 255, 255, 0.7)\"\r\n    spinner.style.display = \"flex\"\r\n    spinner.style.alignItems = \"center\"\r\n    spinner.style.justifyContent = \"center\"\r\n    spinner.style.fontSize = \"24px\"\r\n    spinner.style.zIndex = \"9999\"\r\n    spinner.innerText = \"‚è≥ Summarizing rows...\"\r\n    document.body.appendChild(spinner)\r\n  }\r\n  spinner.style.display = isLoading ? \"flex\" : \"none\"\r\n}","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.js\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>AI Summarizer</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" defer=\\\"defer\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\"> </head> <body> <div class=\\\"container\\\"> <h1>AI Summarizer</h1> <div class=\\\"form-group\\\"> <label for=\\\"headerRow\\\">Header Row:</label> <input type=\\\"number\\\" id=\\\"headerRow\\\" min=\\\"1\\\" value=\\\"1\\\"/> </div> <div class=\\\"form-group\\\"> <label for=\\\"formatPrompt\\\">Prompt to run each row:</label> <textarea id=\\\"formatPrompt\\\">You are an expert in summarizing data. You are responsible for summarizing data from {{Description}}.</textarea> <div class=\\\"hint\\\">Use {{ColumnName}} to reference any column from your spreadsheet</div> <div class=\\\"example\\\">Example: Replace {{Description}} with any column name like {{A}} or {{E}}</div> </div> <div class=\\\"form-group\\\"> <label for=\\\"outputColumn\\\">Put results in column:</label> <input type=\\\"text\\\" id=\\\"outputColumn\\\" placeholder=\\\"e.g., C\\\"/> </div> <div class=\\\"form-group\\\"> <label>Start from row:</label> <div class=\\\"radio-group\\\"> <input type=\\\"radio\\\" name=\\\"rowMode\\\" id=\\\"autoMode\\\" value=\\\"auto\\\" checked=\\\"checked\\\"/> <label for=\\\"autoMode\\\">Auto</label> <input type=\\\"number\\\" id=\\\"autoRowCount\\\" value=\\\"3\\\" min=\\\"1\\\" class=\\\"small-input\\\"/> </div> <div class=\\\"radio-group\\\"> <input type=\\\"radio\\\" name=\\\"rowMode\\\" id=\\\"fixedMode\\\" value=\\\"fixed\\\"/> <label for=\\\"fixedMode\\\">Fixed</label> <input type=\\\"number\\\" id=\\\"fixedStartRow\\\" placeholder=\\\"Start Row\\\" value=\\\"2\\\" class=\\\"small-input\\\"/> <input type=\\\"number\\\" id=\\\"fixedEndRow\\\" placeholder=\\\"End Row\\\" value=\\\"4\\\" class=\\\"small-input\\\"/> </div> </div> <div class=\\\"form-group\\\"> <label for=\\\"temperature\\\">Creativity (Temperature):</label> <div class=\\\"slider-container\\\"> <input type=\\\"range\\\" id=\\\"temperature\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.1\\\" value=\\\"0.7\\\"/> <span id=\\\"temp-display\\\">0.7</span> </div> </div> <button class=\\\"primary-button\\\" onclick=\\\"processRows()\\\">Summarize Rows</button> </div> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","Office","onReady","console","log","getElementById","addEventListener","innerText","value","URL"],"sourceRoot":""}